#include<iostream>
#include<bits/stdc++.h>
using namespace std;

struct Node
{
    Node* lchild;
    int data;
    Node* rchild;
}*root=NULL;

void create()
{
    Node *t,*p;
    int x;
    
    queue<Node* > q;
    cout<<"ENTER ROOT VALUE ";
    cin>>x;
    
    root=new Node;
    root->data=x;
    root->lchild=root->rchild=NULL;
    q.push(root);
    
    while(!q.empty())
    {
        p=q.front();
        q.pop();
        
        cout<<"ENTER LEFT CHILD OF "<<p->data<<" : ";
        cin>>x;
        
        if(x!=-1)
        {
            t=new Node;
            t->data=x;
            t->lchild=t->rchild=NULL;
            p->lchild=t;
            q.push(t);
        }
        
        cout<<"ENTER RIGHT CHILD OF "<<p->data<<" : ";
        cin>>x;
        
        if(x!=-1)
        {
            t=new Node;
            t->data=x;
            t->lchild=t->rchild=NULL;
            p->rchild=t;
            q.push(t);
        }
    }
}




// check for balanced binary tree 

int f=1;

int solve(Node *root)
{
    if(!root) return 0;
    
    int l = solve(root->lchild);
    int r = solve(root->rchild);
    
    if(abs(l-r)>1) f=0;
    return max(l,r)+1;
}

bool isbalance(Node *root)
{
    f=1;
    solve(root);
    return f;
}





int main()
{
    create();
    cout<<endl;
    
    bool ans = isbalance(root);
    
    cout<<ans;
    
    
    return 0;
}
